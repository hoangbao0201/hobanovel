import Head from "next/head";

import WrapperLayout from "@/components/Layout/WrapperLayout";
import { useMediaQuery } from "usehooks-ts";
import { Fragment, ReactNode, useState } from "react";
import MainLayout from "@/components/Layout/MainLayout";
import { PROPERTIES_NOVEL } from "@/constants/data";

type querySearchNovelTypes = {
    [key: string]: number[];
};

interface querySearchNovelProps extends querySearchNovelTypes {
    genres: number[]
    status: number[]
    personality: number[]
    scene: number[]
    classify: number[]
    viewFrame: number[]
}

const NovelDetailPage = () => {
    const matchesMobile = useMediaQuery("(max-width: 640px)");
    const [querySearchNovel, setQuerySearchNovel] = useState<querySearchNovelProps>({
        genres: [],
        status: [],
        personality: [],
        scene: [],
        classify: [],
        viewFrame: [],
    })


    const handleAddQuerySearch = (key: keyof querySearchNovelProps, data: number) => {
        setQuerySearchNovel(value => ({
            ...value,
            [key]: [...value[key], data]
        }));
    }

    const handleDeleteQuerySearch = (key: keyof querySearchNovelProps, data: number) => {
        setQuerySearchNovel(value => ({
            ...value,
            [key]: value[key].filter(index => index !== data) 
        }));
    }

    const listCheckQuery = Object.keys(querySearchNovel).map((key, indexParent) => (
        <Fragment key={indexParent}>
            {querySearchNovel[key].map((item, indexChild) => (
                <li
                    onClick={() => handleDeleteQuerySearch(key, item)}
                    key={indexChild}
                    className="whitespace-nowrap cursor-pointer text-[12px] px-2 border border-[#666] rounded-[3px]"
                >
                    {PROPERTIES_NOVEL[key][item - 1].value}
                </li>
            ))}
        </Fragment>
    ));

    console.log(querySearchNovel)

    //  -----

    const getLayout = (page: ReactNode) => {
        return <MainLayout isBannerPage={!matchesMobile}>{page}</MainLayout>;
    };
    return getLayout(
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <WrapperLayout className="pt-5 max-lg:max-w-3xl">
                    <div>
                        <div className="sm:px-4 lg:flex">
                            <div className="w-3/12">
                                <div>
                                    <h4>Đã chọn</h4>
                                    <ul className="flex flex-wrap gap-1">
                                        {listCheckQuery}
                                    </ul>
                                </div>
                                <div className="py-4 border-b">
                                    <h4>Thể loại</h4>
                                    <ul className="flex flex-wrap gap-2">
                                        {PROPERTIES_NOVEL.genres.map((item, index) => {
                                            return <li onClick={!querySearchNovel.genres.includes(item.id) ? (() => handleAddQuerySearch('genres', item.id)) : (() => handleDeleteQuerySearch('genres', item.id))} key={index} 
                                                className={`${ querySearchNovel.genres.includes(item.id) ? 'bg-[#666] text-white' : 'hover:bg-[#666] hover:text-white' } whitespace-nowrap cursor-pointer text-[12px] py-1 px-2 border border-[#666] rounded-[3px]`}
                                            >{item.value}</li>
                                        })}
                                    </ul>
                                </div>
                                <div className="py-4 border-b">
                                    <h4>Tình trạng</h4>
                                    <ul className="flex flex-wrap gap-2">
                                        {PROPERTIES_NOVEL.status.map((item, index) => {
                                            return <li onClick={!querySearchNovel.status.includes(item.id) ? (() => handleAddQuerySearch('status', item.id)) : (() => handleDeleteQuerySearch('status', item.id))} key={index} 
                                                className={`${ querySearchNovel.status.includes(item.id) ? 'bg-[#666] text-white' : 'hover:bg-[#666] hover:text-white' } whitespace-nowrap cursor-pointer text-[12px] py-1 px-2 border border-[#666] rounded-[3px]`}
                                            >{item.value}</li>
                                        })}
                                    </ul>
                                </div>
                                <div className="py-4 border-b">
                                    <h4>Tính cách nhân vật chính</h4>
                                    <ul className="flex flex-wrap gap-2">
                                        {PROPERTIES_NOVEL.personality.map((item, index) => {
                                            return <li onClick={!querySearchNovel.personality.includes(item.id) ? (() => handleAddQuerySearch('personality', item.id)) : (() => handleDeleteQuerySearch('personality', item.id))} key={index} 
                                                className={`${ querySearchNovel.personality.includes(item.id) ? 'bg-[#666] text-white' : 'hover:bg-[#666] hover:text-white' } whitespace-nowrap cursor-pointer text-[12px] py-1 px-2 border border-[#666] rounded-[3px]`}
                                            >{item.value}</li>
                                        })}
                                    </ul>
                                </div>
                                <div className="py-4 border-b">
                                    <h4>Bối cảnh thế giới</h4>
                                    <ul className="flex flex-wrap gap-2">
                                        {PROPERTIES_NOVEL.scene.map((item, index) => {
                                            return <li onClick={!querySearchNovel.scene.includes(item.id) ? (() => handleAddQuerySearch('scene', item.id)) : (() => handleDeleteQuerySearch('scene', item.id))} key={index} 
                                                className={`${ querySearchNovel.scene.includes(item.id) ? 'bg-[#666] text-white' : 'hover:bg-[#666] hover:text-white' } whitespace-nowrap cursor-pointer text-[12px] py-1 px-2 border border-[#666] rounded-[3px]`}
                                            >{item.value}</li>
                                        })}
                                    </ul>
                                </div>
                                <div className="py-4 border-b">
                                    <h4>Lưu phái</h4>
                                    <ul className="flex flex-wrap gap-2">
                                        {PROPERTIES_NOVEL.classify.map((item, index) => {
                                            return <li onClick={!querySearchNovel.classify.includes(item.id) ? (() => handleAddQuerySearch('classify', item.id)) : (() => handleDeleteQuerySearch('classify', item.id))} key={index} 
                                                className={`${ querySearchNovel.classify.includes(item.id) ? 'bg-[#666] text-white' : 'hover:bg-[#666] hover:text-white' } whitespace-nowrap cursor-pointer text-[12px] py-1 px-2 border border-[#666] rounded-[3px]`}
                                            >{item.value}</li>
                                        })}
                                    </ul>
                                </div>
                                <div className="py-4 border-b">
                                    <h4>Thị giác</h4>
                                    <ul className="flex flex-wrap gap-2">
                                        {PROPERTIES_NOVEL.viewFrame.map((item, index) => {
                                            return <li onClick={!querySearchNovel.viewFrame.includes(item.id) ? (() => handleAddQuerySearch('viewFrame', item.id)) : (() => handleDeleteQuerySearch('viewFrame', item.id))} key={index} 
                                                className={`${ querySearchNovel.viewFrame.includes(item.id) ? 'bg-[#666] text-white' : 'hover:bg-[#666] hover:text-white' } whitespace-nowrap cursor-pointer text-[12px] py-1 px-2 border border-[#666] rounded-[3px]`}
                                            >{item.value}</li>
                                        })}
                                    </ul>
                                </div>
                            </div>
                            <div className="w-9/12">b</div>
                        </div>
                    </div>
                </WrapperLayout>
            </main>
        </>
    );
};

// export const getServerSideProps: GetServerSideProps = async (context) => {
//     try {
//         const { novelSlug } = context.params as Params;
//         // const token = getAccessTokenOnServer(context.req.headers.cookie as string)

//         const novelResponse = await getNovelBySlugHandle(novelSlug as string);

//         if(!novelResponse) {
//             return { notFound: true };
//         }

//         return {
//             props: {
//                 novel: JSON.parse(JSON.stringify(novelResponse.data?.novel)),
//                 tab: context.params?.hash?.toString() || "intro",
//             },
//         };
//     } catch (error) {
//         return { notFound: true };
//     }
// };

// export const getStaticProps: GetStaticProps<NovelDetailPageProps, Params> = async (
//     context: GetStaticPropsContext<Params>
// ) => {
//     try {
//         const { novelSlug } = context.params as Params;

//         const novelResponse = await getNovelBySlugHandle(novelSlug as string);

//         if (!novelResponse) {
//             return { notFound: true, props: { novel: null, tab: "intro" } };
//         }

//         return {
//             props: {
//                 novel: novelResponse?.data.novel || null,
//                 tab: context.params?.hash?.toString() || "intro",
//             },
//             revalidate: REVALIDATE_TIME,
//         };

//     } catch (error) {
//         return { notFound: true, props: { novel: null, tab: "intro" } };
//     }
// };
// export const getStaticPaths: GetStaticPaths<Params> = () => {
//     return {
//         paths: [],
//         fallback: true,
//     };
// };

export default NovelDetailPage;




// cho array1, array2

// array1 = {
// 	aaa: [
//         { id: 1, value: 'ab' },
//         { id: 2, value: 'bc' },
//         { id: 3, value: 'cd' },
//         { id: 4, value: 'ef' },
//     ],
// 	bbb: [
//         { id: 1, value: 'ac' },
//         { id: 2, value: 'bd' },
//         { id: 3, value: 'ce' },
//     ],
// 	ccc: [
//         { id: 1, value: 'ad' },
//         { id: 2, value: 'be' },
//         { id: 3, value: 'cf' },
//     ]
// }

// array2 = {
// 	aaa: [1,4],
// 	bbb: [3],
// 	ccc: [2,3]
// }

// làm sao để thành:
// <li>ab</li>
// <li>ef</li>
// <li>ce</li>
// <li>be</li>
// <li>cf</li>