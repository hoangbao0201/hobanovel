import Head from "next/head";
import Link from "next/link";
import { ReactNode, useState } from "react";
import { GetServerSideProps } from "next";

import { NovelType } from "@/types";
import { placeholderBlurhash } from "@/constants";
import MainLayout from "@/components/Layout/MainLayout";
import BlurImage from "@/components/Layout/BlurImage";
import { ParsedUrlQuery } from "querystring";
import { getNovelBySlugHandle } from "@/services/novels.services";
import { iconBookmark, iconGlasses, iconStar } from "../../../public/icons";
import ContentHome from "@/components/Share/ContentNovel/ContentHome";

interface Params extends ParsedUrlQuery {
    slug: string;
}

export interface NovelWithView extends NovelType {
    newChapterCount: number
    totalChapterCount: number
    mediumScore: number
}

export interface NovelDetailPageProps {
    novel?: NovelWithView
}

const NovelDetailPage = ({novel} : NovelDetailPageProps) => {
    const [numberTab, setNumberTab] = useState(1);

    if (!novel) {
        return <div>123</div>;
    }

    console.log(novel)

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <div className="max-w-7xl min-h-[300px] mx-auto px-4 grid bg-white rounded-xl">
                    <div className="my-4 mb-8 flex">
                        <Link
                            href={`/truyen/${novel.slug}`}
                            className="w-52 h-[280px] overflow-hidden shadow align-middle inline-block"
                        >
                            <BlurImage
                                width={720}
                                height={960}
                                alt="image-demo"
                                blurDataURL={placeholderBlurhash}
                                className="group-hover:scale-105 group-hover:duration-500 object-cover"
                                placeholder="blur"
                                src={novel.thumbnailUrl}
                            />
                        </Link>
                        <div className="ml-5">
                            <Link href={`/truyen/${novel.slug}`}>
                                <h2 className="mb-6 text-2xl font-semibold">{novel.title}</h2>
                            </Link>
                            <div className="flex items-center flex-wrap gap-2 text-sm mb-4">
                                {novel.author && (
                                    <div className="border-[#666] text-[#666] px-4 py-1 border rounded-full">
                                        {novel.author}
                                    </div>
                                )}
                                <div className="border-[#bf2c24] text-[#bf2c24] px-4 py-1 border rounded-full">
                                    {novel.newChapterCount > 0
                                        ? "Đang ra"
                                        : "Chưa ra chương mới"}
                                </div>
                                {novel.category && (
                                    <div className="border-[#b78a28] text-[#b78a28] px-4 py-1 border rounded-full">
                                        {novel.category}
                                    </div>
                                )}
                                {novel.personality && (
                                    <div className="border-[#088860] text-[#088860] px-4 py-1 border rounded-full">
                                        {novel.personality}
                                    </div>
                                )}
                                {novel.scene && (
                                    <div className="border-[#088860] text-[#088860] px-4 py-1 border rounded-full">
                                        {novel.scene}
                                    </div>
                                )}
                                {novel.classify && (
                                    <div className="border-[#088860] text-[#088860] px-4 py-1 border rounded-full">
                                        {novel.classify}
                                    </div>
                                )}
                                {novel.viewFrame && (
                                    <div className="border-[#088860] text-[#088860] px-4 py-1 border rounded-full">
                                        {novel.viewFrame}
                                    </div>
                                )}
                            </div>
                            <div className="flex gap-9 mb-4">
                                <div className="text-center">
                                    <span className="font-semibold">{novel.totalChapterCount || 0}</span>
                                    <div className="text-base">Chương</div>
                                </div>
                                <div className="text-center">
                                    <span className="font-semibold">{novel.newChapterCount || 0}</span>
                                    <div className="text-base">Chương/tuần</div>
                                </div>
                                <div className="text-center">
                                    <span className="font-semibold">818</span>
                                    <div className="text-base">Lượt đọc</div>
                                </div>
                                <div className="text-center">
                                    <span className="font-semibold">818</span>
                                    <div className="text-base">Cất giữ</div>
                                </div>
                            </div>
                            <div className="flex items-center mb-4 w">
                                <div className="gap-1 relative">
                                    <i className="w-4 mx-1 inline-block fill-yellow-400 opacity-40">
                                        {iconStar}
                                    </i>
                                    <i className="w-4 mx-1 inline-block fill-yellow-400 opacity-40">
                                        {iconStar}
                                    </i>
                                    <i className="w-4 mx-1 inline-block fill-yellow-400 opacity-40">
                                        {iconStar}
                                    </i>
                                    <i className="w-4 mx-1 inline-block fill-yellow-400 opacity-40">
                                        {iconStar}
                                    </i>
                                    <i className="w-4 mx-1 inline-block fill-yellow-400 opacity-40">
                                        {iconStar}
                                    </i>

                                    <div
                                        style={{
                                            width: `${
                                                novel
                                                    ? (novel?.mediumScore * 20) ?? 100
                                                    : 100
                                            }%`,
                                        }}
                                        className="max-w-full block whitespace-nowrap overflow-hidden absolute gap-1 top-0 left-0 right-0 bottom-0"
                                    >
                                        <i className="w-4 mx-1 inline-block fill-yellow-500">
                                            {iconStar}
                                        </i>
                                        <i className="w-4 mx-1 inline-block fill-yellow-500">
                                            {iconStar}
                                        </i>
                                        <i className="w-4 mx-1 inline-block fill-yellow-500">
                                            {iconStar}
                                        </i>
                                        <i className="w-4 mx-1 inline-block fill-yellow-500">
                                            {iconStar}
                                        </i>
                                        <i className="w-4 mx-1 inline-block fill-yellow-500">
                                            {iconStar}
                                        </i>
                                    </div>
                                </div>
                            </div>
                            <div className="flex gap-3 flex-wrap text-xl">
                                <Link href="/">
                                    <span className="min-w-[120px] text-center bg-yellow-500 hover:bg-yellow-600 border-yellow-500 rounded-full py-2 px-6 text-white font-semibold flex items-center justify-center">
                                        <i className="w-5 block fill-white mr-2">
                                            {iconGlasses}
                                        </i>
                                        Đọc truyện
                                    </span>
                                </Link>
                                <Link href="/">
                                    <span className="min-w-[120px] text-center bg-white hover:bg-gray-100 border border-gray-500 text-gray-500 rounded-full  py-2 px-6 font-semibold flex items-center justify-center">
                                        <i className="w-3 block fill-gray-500 mr-2">
                                            {iconBookmark}
                                        </i>
                                        Đánh dấu
                                    </span>
                                </Link>
                                <Link href="/">
                                    <span className="min-w-[160px] text-center bg-yellow-100 hover:bg-yellow-200 text-orange-700 border border-orange-700 rounded-full  py-2 px-6 font-semibold flex items-center justify-center">
                                        <i
                                            style={{
                                                backgroundImage:
                                                    "url(/emotions/flowerEmotion.svg?v=1)",
                                            }}
                                            className="w-4 h-5 fill-white mr-1 inline-block bg-no-repeat bg-contain"
                                        ></i>
                                        Đề cử
                                    </span>
                                </Link>
                            </div>
                        </div>
                    </div>
                    <div className="mb-5">
                        <div className="border-b mb-5 text-xl font-semibold">
                            <button
                                onClick={() => setNumberTab(1)}
                                className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                    numberTab == 1 && "border-b-4 border-yellow-600"
                                }`}
                            >
                                Giới thiệu
                            </button>
                            <button
                                onClick={() => setNumberTab(2)}
                                className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                    numberTab == 2 && "border-b-4 border-yellow-600"
                                }`}
                            >
                                Đánh giá
                            </button>
                            <button
                                onClick={() => setNumberTab(3)}
                                className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                    numberTab == 3 && "border-b-4 border-yellow-600"
                                }`}
                            >
                                D.s chương
                            </button>
                            <button
                                onClick={() => setNumberTab(4)}
                                className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                    numberTab == 4 && "border-b-4 border-yellow-600"
                                }`}
                            >
                                Bình luận
                            </button>
                            <button
                                onClick={() => setNumberTab(5)}
                                className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                    numberTab == 5 && "border-b-4 border-yellow-600"
                                }`}
                            >
                                Hâm mộ
                            </button>
                        </div>
                        <div className="min-h-[500px]">
                            <ContentHome tab={numberTab} novel={novel}/>
                        </div>
                    </div>
                </div>
            </main>
        </>
    );
};

export const getServerSideProps: GetServerSideProps = async (ctx) => {
    try {
        const { novelSlug } = ctx.params as Params;

        const novelResponse = await getNovelBySlugHandle(novelSlug as string);

        if (novelResponse) {
            return {
                props: {
                    novel: JSON.parse(JSON.stringify(novelResponse.data?.novel)),
                },
            };
        }
        return { notFound: true };
    } catch (error) {
        return { notFound: true };
    }
};

// export const getStaticProps : GetStaticProps<NovelDetailPageProps, Params> = async (ctx) => {
//     try {
//         const { novelSlug } = ctx.params as Params

//         const novelResponse = await getNovelBySlugHandle(novelSlug as string)

//         if(novelResponse) {
//             return {
//                 props: {
//                     novel: novelResponse?.data.novel || null,
//                 },
//                 revalidate: REVALIDATE_TIME,
//             };
//         }
//         return { notFound: true };

//     } catch (error) {
//         return { notFound: true };
//     }
// }

// export const getStaticPaths : GetStaticPaths<Params> = () => {
//     return {
//         paths: [],
//         fallback: true
//     }
// }

NovelDetailPage.getLayout = (page: ReactNode) => {
    return <MainLayout isBannerPage={false}>{page}</MainLayout>;
};

export default NovelDetailPage;
