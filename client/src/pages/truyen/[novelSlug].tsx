import Head from "next/head";
import Link from "next/link";
import { ReactNode, useState } from "react";
import {
    GetServerSideProps,
    GetStaticPaths,
    GetStaticProps,
    GetStaticPropsContext,
} from "next";

import { NovelBySlugType } from "@/types";
import { ParsedUrlQuery } from "querystring";
import { REVALIDATE_TIME, placeholderBlurhash } from "@/constants";
import BlurImage from "@/components/Layout/BlurImage";
import MainLayout from "@/components/Layout/MainLayout";
import { getNovelBySlugHandle } from "@/services/novels.services";
import { iconBookmark, iconGlasses } from "../../../public/icons";
import WrapperLayout from "@/components/Layout/WrapperLayout";
import { Tab, Transition } from "@headlessui/react";
import FormIntroduce from "@/components/Share/ContentNovel/FormIntroduce";
import FormFeedback from "@/components/Share/ContentNovel/FormFeedback";
import FormListChapters from "@/components/Share/ContentNovel/FormListChapters";
import FormComment from "@/components/Share/ContentNovel/FormComment";
import { convertViewsCount } from "@/utils/convertViewsCount";
import { ListStarLayout } from "@/components/Layout/ListStarLayout";
import { getAccessTokenOnServer } from "@/services/cookies.servies";

import Tippy from "@tippyjs/react";
import 'tippy.js/dist/tippy.css'; // optional

interface Params extends ParsedUrlQuery {
    novelSlug: string;
}

export interface NovelDetailPageProps {
    token?: any
    tab?: string;
    novel?: NovelBySlugType;
}

const NovelDetailPage = ({ token, tab, novel }: NovelDetailPageProps) => {
    const [numberTab, setNumberTab] = useState(0);

    if (!novel) {
        return <div></div>;
    }

    // console.log("token: ", token)
    
    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main>
                <WrapperLayout>
                    <div className="flex">
                        <Link
                            href={`/truyen/${novel.slug}`}
                            className="w-52 h-[280px] overflow-hidden shadow relative"
                        >
                            <BlurImage
                                width={208}
                                height={280}
                                alt="image-demo"
                                blurDataURL={novel.imageBlurHash || placeholderBlurhash}
                                className="group-hover:scale-105 group-hover:duration-500 object-cover w-full h-full"
                                placeholder="blur"
                                src={novel.thumbnailUrl}
                            />
                        </Link>
                        <div className="ml-5 min-h-[280px] relative flex-1 flex flex-col justify-between">
                            <Link href={`/truyen/${novel.slug}`}>
                                <h2 className="mb-6 text-2xl font-semibold">{novel.title}</h2>
                            </Link>
                            <div className="flex items-center flex-wrap gap-2 text-sm mb-4">
                                {novel.author && (
                                    <div className="border-[#666] text-[#666] px-3 py-1 border rounded-full ">
                                        {novel.author}
                                    </div>
                                )}
                                <div className="border-[#bf2c24] text-[#bf2c24] px-3 py-1 border rounded-full ">
                                    {novel.newChapterCount > 0
                                        ? "Đang ra"
                                        : "Chưa ra chương mới"}
                                </div>
                                {novel.category && (
                                    <div className="border-[#b78a28] text-[#b78a28] px-3 py-1 border rounded-full ">
                                        {novel.category}
                                    </div>
                                )}
                                {novel.personality && (
                                    <div className="border-[#088860] text-[#088860] px-3 py-1 border rounded-full ">
                                        {novel.personality}
                                    </div>
                                )}
                                {novel.scene && (
                                    <div className="border-[#088860] text-[#088860] px-3 py-1 border rounded-full ">
                                        {novel.scene}
                                    </div>
                                )}
                                {novel.classify && (
                                    <div className="border-[#088860] text-[#088860] px-3 py-1 border rounded-full ">
                                        {novel.classify}
                                    </div>
                                )}
                                {novel.viewFrame && (
                                    <div className="border-[#088860] text-[#088860] px-3 py-1 border rounded-full ">
                                        {novel.viewFrame}
                                    </div>
                                )}
                            </div>
                            <div className="flex gap-9 mb-4">
                                <div className="text-center">
                                    <span className="font-semibold">
                                        {novel.chapterCount || 0}
                                    </span>
                                    <div className="text-base">Chương</div>
                                </div>
                                <div className="text-center">
                                    <span className="font-semibold">
                                        {novel.newChapterCount || 0}
                                    </span>
                                    <div className="text-base">Chương/tuần</div>
                                </div>
                                    <Tippy
                                        theme="light"
                                        arrow={true}
                                        delay={[500,0]}
                                        content={novel.views}
                                    >
                                        <div className="text-center cursor-default">
                                            <span className="font-semibold">
                                                {convertViewsCount(novel.views)}
                                            </span>
                                            <div className="text-base">Lượt đọc</div>
                                        </div>
                                    </Tippy>
                                    {/* <span className="font-semibold">{(novel.views)}</span> */}
                                <div className="text-center">
                                    <span className="font-semibold">818</span>
                                    <div className="text-base">Cất giữ</div>
                                </div>
                            </div>

                            <ListStarLayout className="mb-4" numb={novel.mediumScore} />

                            <div className="flex gap-3 flex-wrap text-xl">
                                <Link href={`/truyen/${novel.slug}/chuong-${novel?.chapterRead || 1}`}>
                                    <span className="min-w-[120px] text-center bg-yellow-500 hover:bg-yellow-600 border-yellow-500 rounded-full py-2 px-6 text-white font-semibold flex items-center justify-center">
                                        <i className="w-5 block fill-white mr-2">
                                            {iconGlasses}
                                        </i>
                                        Đọc truyện
                                    </span>
                                </Link>
                                <Link href="/">
                                    <span className="min-w-[120px] text-center bg-white hover:bg-gray-100 border border-gray-500 text-gray-500 rounded-full  py-2 px-6 font-semibold flex items-center justify-center">
                                        <i className="w-3 block fill-gray-500 mr-2">
                                            {iconBookmark}
                                        </i>
                                        Đánh dấu
                                    </span>
                                </Link>
                                <Link href="/">
                                    <span className="min-w-[160px] text-center bg-yellow-100 hover:bg-yellow-200 text-orange-700 border border-orange-700 rounded-full  py-2 px-6 font-semibold flex items-center justify-center">
                                        <i
                                            style={{
                                                backgroundImage:
                                                    "url(/emotions/flowerEmotion.svg?v=1)",
                                            }}
                                            className="w-4 h-5 fill-white mr-1 inline-block bg-no-repeat bg-contain"
                                        ></i>
                                        Đề cử
                                    </span>
                                </Link>
                            </div>
                        </div>
                    </div>

                    <div className="mb-5">
                        <Tab.Group
                            defaultIndex={0}
                            selectedIndex={numberTab}
                            onChange={(index: number) => setNumberTab(index)}
                        >
                            <Tab.List className="border-b mb-5 text-xl font-semibold">
                                <Tab
                                    className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                        numberTab == 0 && "border-b-4 border-yellow-600"
                                    }`}
                                >
                                    Giới thiệu
                                </Tab>
                                <Tab
                                    className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                        numberTab == 1 && "border-b-4 border-yellow-600"
                                    }`}
                                >
                                    Đánh giá
                                </Tab>
                                <Tab
                                    className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                        numberTab == 2 && "border-b-4 border-yellow-600"
                                    }`}
                                >
                                    D.s chương
                                </Tab>
                                <Tab
                                    className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                        numberTab == 3 && "border-b-4 border-yellow-600"
                                    }`}
                                >
                                    Bình luận
                                </Tab>
                                <Tab
                                    className={`py-5 mr-8 outline-none hover:text-yellow-600 ${
                                        numberTab == 4 && "border-b-4 border-yellow-600"
                                    }`}
                                >
                                    Hâm mộ
                                </Tab>
                            </Tab.List>
                            <Tab.Panels className="min-h-[400px]">
                                {/* <ContentHome tab={numberTab} novel={novel}/> */}

                                <Tab.Panel>
                                    <Transition
                                        appear
                                        show={numberTab == 0}
                                        enter="transition-opacity duration-500"
                                        enterFrom="opacity-0"
                                        enterTo="opacity-100"
                                        leave="transition-opacity duration-500"
                                        leaveFrom="opacity-100"
                                        leaveTo="opacity-0"
                                    >
                                        <FormIntroduce
                                            description={novel?.description || ""}
                                        />
                                    </Transition>
                                </Tab.Panel>
                                <Tab.Panel>
                                    <Transition
                                        appear
                                        show={numberTab == 1}
                                        enter="transition-opacity duration-500"
                                        enterFrom="opacity-0"
                                        enterTo="opacity-100"
                                        leave="transition-opacity duration-500"
                                        leaveFrom="opacity-100"
                                        leaveTo="opacity-0"
                                    >
                                        <FormFeedback
                                            tab={numberTab}
                                            novelId={novel?.novelId}
                                        />
                                    </Transition>
                                </Tab.Panel>
                                <Tab.Panel>
                                    <Transition
                                        appear
                                        show={numberTab == 2}
                                        enter="transition-opacity duration-500"
                                        enterFrom="opacity-0"
                                        enterTo="opacity-100"
                                        leave="transition-opacity duration-500"
                                        leaveFrom="opacity-100"
                                        leaveTo="opacity-0"
                                    >
                                        <FormListChapters tab={numberTab} slug={novel?.slug} />
                                    </Transition>
                                </Tab.Panel>
                                <Tab.Panel>
                                    <Transition
                                        appear
                                        show={numberTab == 3}
                                        enter="transition-opacity duration-500"
                                        enterFrom="opacity-0"
                                        enterTo="opacity-100"
                                        leave="transition-opacity duration-500"
                                        leaveFrom="opacity-100"
                                        leaveTo="opacity-0"
                                    >
                                        <FormComment
                                            tab={numberTab}
                                            novelId={novel?.novelId}
                                        />
                                    </Transition>
                                </Tab.Panel>
                                <Tab.Panel>
                                    <Transition
                                        appear
                                        show={numberTab == 4}
                                        enter="transition-opacity duration-500"
                                        enterFrom="opacity-0"
                                        enterTo="opacity-100"
                                        leave="transition-opacity duration-500"
                                        leaveFrom="opacity-100"
                                        leaveTo="opacity-0"
                                    >
                                        <div>Hâm mộ</div>
                                    </Transition>
                                </Tab.Panel>
                            </Tab.Panels>
                        </Tab.Group>
                    </div>
                </WrapperLayout>
            </main>
        </>
    );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
    try {
        const { novelSlug } = context.params as Params;
        // const token = getAccessTokenOnServer(context.req.headers.cookie as string)

        const novelResponse = await getNovelBySlugHandle(novelSlug as string);

        if(!novelResponse) {
            return { notFound: true };
        }

        return {
            props: {
                novel: JSON.parse(JSON.stringify(novelResponse.data?.novel)),
                tab: context.params?.hash?.toString() || "intro",
            },
        };
    } catch (error) {
        return { notFound: true };
    }
};

// export const getStaticProps: GetStaticProps<NovelDetailPageProps, Params> = async (
//     context: GetStaticPropsContext<Params>
// ) => {
//     try {
//         const { novelSlug } = context.params as Params;

//         const novelResponse = await getNovelBySlugHandle(novelSlug as string);

//         if (!novelResponse) {
//             return { notFound: true, props: { novel: null, tab: "intro" } };
//         }


//         return {
//             props: {
//                 novel: novelResponse?.data.novel || null,
//                 tab: context.params?.hash?.toString() || "intro",
//             },
//             revalidate: REVALIDATE_TIME,
//         };

//     } catch (error) {
//         return { notFound: true, props: { novel: null, tab: "intro" } };
//     }
// };
// export const getStaticPaths: GetStaticPaths<Params> = () => {
//     return {
//         paths: [],
//         fallback: true,
//     };
// };

NovelDetailPage.getLayout = (page: ReactNode) => {
    return <MainLayout isBannerPage={true}>{page}</MainLayout>;
};

export default NovelDetailPage;
