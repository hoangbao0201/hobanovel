import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import dynamic from "next/dynamic";
import { ReactNode, useEffect, useState } from "react";
import {
    GetServerSideProps
} from "next";

import Tippy from "@tippyjs/react";
import 'tippy.js/dist/tippy.css';

import { NovelBySlugType } from "@/types";
import { ParsedUrlQuery } from "querystring";
import { REVALIDATE_TIME, placeholderBlurhash } from "@/constants";
import BlurImage from "@/components/Layout/BlurImage";
import MainLayout from "@/components/Layout/MainLayout";
import { getNovelBySlugHandle } from "@/services/novels.services";
import { iconBookmark, iconGlasses } from "../../../public/icons";
import WrapperLayout from "@/components/Layout/WrapperLayout";
import { Tab, Transition } from "@headlessui/react";
import { convertViewsCount } from "@/utils/convertViewsCount";
import { ListStarLayout } from "@/components/Layout/ListStarLayout";
import { useMediaQuery } from "usehooks-ts";

// import FormIntroduce from "@/components/Share/ContentNovelDetail/FormIntroduce";
// import FormFeedback from "@/components/Share/ContentNovelDetail/FormFeedback";
// import FormListChapters from "@/components/Share/ContentNovelDetail/FormListChapters";
// import FormComment from "@/components/Share/ContentNovelDetail/FormComment";

const FormIntroduce = dynamic(
    () => import("../../components/Share/ContentNovelDetail/FormIntroduce", {
        ssr: false,
    } as ImportCallOptions)
)
const FormFeedback = dynamic(
    () => import("../../components/Share/ContentNovelDetail/FormFeedback", {
        ssr: false,
    } as ImportCallOptions)
)
const FormListChapters = dynamic(
    () => import("../../components/Share/ContentNovelDetail/FormListChapters", {
        ssr: false,
    } as ImportCallOptions)
)
const FormComment = dynamic(
    () => import("../../components/Share/ContentNovelDetail/FormComment", {
        ssr: false,
    } as ImportCallOptions)
)


interface Params extends ParsedUrlQuery {
    novelSlug: string;
}

export interface NovelDetailPageProps {
    token?: any
    tab?: string;
    novel?: NovelBySlugType;
}

const NovelDetailPage = ({ token, tab, novel }: NovelDetailPageProps) => {

    const matchesMobile = useMediaQuery('(max-width: 640px)')

    const [numberTab, setNumberTab] = useState(0);
    // const [scaleInfoNovel, setScaleInfoNovel] = useState(1);

    const getLayout = (page : ReactNode) => {
        return <MainLayout isBannerPage={!matchesMobile}>{page}</MainLayout>;
    };

    // useEffect(() => {
    //     window.onscroll = () => {
    //         const currentScrollPosition = window.pageYOffset;
    //         if (currentScrollPosition <= 600) {
    //             const nb = (1 - (currentScrollPosition/600))
    //             // setScaleInfoNovel(parseFloat(nb.toFixed(1)));
    //             setScaleInfoNovel(nb);
    //         }
    //     };
    // }, []);

    if (!novel) {
        return <div></div>;
    }
    
    return (
        getLayout(
            <>
                <Head>
                    <title>Create Next App</title>
                    <meta name="description" content="Generated by create next app" />
                    <meta name="viewport" content="width=device-width, initial-scale=1" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
                <main>
                    <WrapperLayout className="pt-5 max-lg:max-w-3xl">
                        <div>
                            <div className="sm:px-4">
    
                                {
                                    matchesMobile && (
                                        <div>
                                            <Image 
                                                width={120}
                                                height={120}
                                                alt=""
                                                src={novel.thumbnailUrl}
                                                className="w-full h-56 overflow-hidden object-cover absolute inline-block bg-cover"
                                            />
                                            <div className="absolute w-full h-56 bg-black/20 backdrop-blur-lg"></div>
                                        </div>
                                    )
                                }
    
                                <div
                                    // style={{ transform: `scale(${scaleInfoNovel})`, opacity: `${scaleInfoNovel}` }} 
                                    className={`flex ${matchesMobile ? "text-white h-56 items-center px-5" : ""}`}
                                >
                                    <Link
                                        href={`/truyen/${novel.slug}`}
                                        className={`lg:w-52 lg:h-[270px] sm:w-40 sm:h-[220px] lg:rounded-none w-24 h-[150px] rounded-md overflow-hidden shadow relative `}
                                    >
                                        <BlurImage
                                            width={208}
                                            height={280}
                                            alt="image-demo"
                                            blurDataURL={novel.imageBlurHash || placeholderBlurhash}
                                            className="group-hover:scale-105 group-hover:duration-500 object-cover w-full h-full"
                                            placeholder="blur"
                                            src={novel.thumbnailUrl}
                                        />
                                    </Link>
                                    <div className="justify-between lg:min-h-[280px] ml-5 min-h-[150px] relative flex-1 flex flex-col">
                                        <Link href={`/truyen/${novel.slug}`}>
                                            <h2 className="lg:mb-6 xs:text-xl line-clamp-2 font-semibold">{novel.title}</h2>
                                        </Link>
                                        {
                                            matchesMobile ? (
                                                <div className="line-clamp-1">
                                                    bởi {novel.author}
                                                </div>
                                            ) : (
                                                <>
                                                    <div className="flex items-center flex-wrap gap-2 text-sm mb-4">
                                                        {novel.author && (
                                                            <div className="border-[#666] text-[#666] px-3 py-1 border rounded-full ">
                                                                {novel.author}
                                                            </div>
                                                        )}
                                                        <div className="border-[#bf2c24] text-[#bf2c24] px-3 py-1 border rounded-full ">
                                                            {novel.newChapterCount > 0
                                                                ? "Đang ra"
                                                                : "Chưa ra chương mới"}
                                                        </div>
                                                        {novel.category && (
                                                            <div className="border-[#b78a28] text-[#b78a28] px-3 py-1 border rounded-full ">
                                                                {novel.category}
                                                            </div>
                                                        )}
                                                        {novel.personality && (
                                                            <div className="border-[#088860] text-[#088860] px-3 py-1 border rounded-full ">
                                                                {novel.personality}
                                                            </div>
                                                        )}
                                                        {novel.scene && (
                                                            <div className="border-[#088860] text-[#088860] px-3 py-1 border rounded-full ">
                                                                {novel.scene}
                                                            </div>
                                                        )}
                                                        {novel.classify && (
                                                            <div className="border-[#088860] text-[#088860] px-3 py-1 border rounded-full ">
                                                                {novel.classify}
                                                            </div>
                                                        )}
                                                        {novel.viewFrame && (
                                                            <div className="border-[#088860] text-[#088860] px-3 py-1 border rounded-full ">
                                                                {novel.viewFrame}
                                                            </div>
                                                        )}
                                                    </div>
                                                    <div className="flex gap-9 mb-4">
                                                        <div className="text-center">
                                                            <span className="font-semibold">
                                                                {novel.chapterCount || 0}
                                                            </span>
                                                            <div className="text-base">Chương</div> 
                                                        </div>
                                                        <div className="text-center">
                                                            <span className="font-semibold">
                                                                {novel.newChapterCount || 0}
                                                            </span>
                                                            <div className="text-base">Chương/tuần</div>
                                                        </div>
                                                            <Tippy
                                                                theme="light"
                                                                arrow={true}
                                                                delay={[500,0]}
                                                                content={novel.views}
                                                            >
                                                                <div className="text-center cursor-default">
                                                                    <span className="font-semibold">
                                                                        {convertViewsCount(novel.views)}
                                                                    </span>
                                                                    <div className="text-base">Lượt đọc</div>
                                                                </div>
                                                            </Tippy>
                                                        <div className="text-center">
                                                            <span className="font-semibold">818</span>
                                                            <div className="text-base">Cất giữ</div>
                                                        </div>
                                                    </div>
                                                </>
                                            )
                                        }
        
                                        <div className="flex">
                                            <ListStarLayout size={matchesMobile ? 3 : 4} className="mb-4" numb={novel.mediumScore} />
                                            {
                                                matchesMobile && (
                                                    <span className="text-sm">
                                                        {novel.mediumScore}
                                                        <span className="text-xs">({10} đánh giá)</span>
                                                    </span>
                                                )
                                            }
                                        </div>
        
                                        <div className="flex gap-3 flex-wrap lg:text-xl text-xs">
                                            <Link href={`/truyen/${novel.slug}/chuong-${novel?.chapterRead || 1}`}>
                                                <span className="lg:min-w-[120px] lg:py-2 lg:px-6 lg:bg-yellow-500 lg:hover:bg-yellow-600 bg-blue-900 hover:bg-blue-950 min-w-[60px] py-1 px-3 text-center border-yellow-500 rounded-full text-white font-semibold flex items-center justify-center">
                                                    {
                                                        !matchesMobile && (
                                                            <i className="w-5 block fill-white mr-2">
                                                                {iconGlasses}
                                                            </i>
                                                        )
                                                    }
                                                    Đọc truyện
                                                </span>
                                            </Link>
                                            <Link href="/">
                                                <span className="lg:min-w-[120px] lg:py-2 lg:px-6 min-w-[60px] py-1 px-3 text-center bg-white hover:bg-gray-100 border border-gray-500 text-gray-500 rounded-full font-semibold flex items-center justify-center">
                                                    <i className="w-3 block fill-gray-500 mr-2">
                                                        {iconBookmark}
                                                    </i>
                                                    Đánh dấu
                                                </span>
                                            </Link>
                                            {
                                                !matchesMobile && (
                                                    <Link href="/">
                                                        <span className="lg:min-w-[160px] lg:py-2 lg:px-6 min-w-[60px] py-1 px-3 text-center bg-yellow-100 hover:bg-yellow-200 text-orange-700 border border-orange-700 rounded-full font-semibold flex items-center justify-center">
                                                            <i
                                                                style={{
                                                                    backgroundImage:
                                                                        "url(/emotions/flowerEmotion.svg?v=1)",
                                                                }}
                                                                className="w-4 h-5 fill-white mr-1 inline-block bg-no-repeat bg-contain"
                                                            ></i>
                                                            Đề cử
                                                        </span>
                                                    </Link>
                                                )
                                            }
                                        </div>
                                    </div>
                                </div>
                                
                            </div>
    
                            <div className="mb-5 sm:px-3">
                                <Tab.Group
                                    defaultIndex={0}
                                    selectedIndex={numberTab}
                                    onChange={(index: number) => setNumberTab(index)}
                                >
                                    <Tab.List className={`border-b mb-3 text-base font-semibold grid-cols-4 grid sm:grid-cols-5`}>
                                        <Tab
                                            className={`outline-none border-b-4 border-transparent hover:text-yellow-600 py-3 sm:mr-8 sm:py-5 ${
                                                numberTab == 0 && "border-yellow-600"
                                            }`}
                                        >
                                            Giới thiệu
                                        </Tab>
                                        <Tab
                                            className={`outline-none border-b-4 border-transparent hover:text-yellow-600 py-3 sm:mr-8 sm:py-5 ${
                                                numberTab == 1 && "border-yellow-600"
                                            }`}
                                        >
                                            Đánh giá
                                        </Tab>
                                        <Tab
                                            className={`outline-none border-b-4 border-transparent hover:text-yellow-600 py-3 sm:mr-8 sm:py-5 ${
                                                numberTab == 2 && "border-yellow-600"
                                            }`}
                                        >
                                            D.s chương
                                        </Tab>
                                        <Tab
                                            className={`outline-none border-b-4 border-transparent hover:text-yellow-600 py-3 sm:mr-8 sm:py-5 ${
                                                numberTab == 3 && "border-yellow-600"
                                            }`}
                                        >
                                            Bình luận
                                        </Tab>
                                        {
                                            !matchesMobile && (
                                                <Tab
                                                    className={`outline-none border-b-4 border-transparent hover:text-yellow-600 py-3 sm:mr-8 sm:py-5 ${
                                                        numberTab == 4 && "border-yellow-600"
                                                    }`}
                                                >
                                                    Hâm mộ
                                                </Tab>
                                            )
                                        }
                                    </Tab.List>
                                    <Tab.Panels className="min-h-[400px]">
                                        <Tab.Panel>
                                            <Transition
                                                appear
                                                show={numberTab == 0}
                                                enter="transition-opacity duration-500"
                                                enterFrom="opacity-0"
                                                enterTo="opacity-100"
                                                leave="transition-opacity duration-500"
                                                leaveFrom="opacity-100"
                                                leaveTo="opacity-0"
                                            >
                                                <FormIntroduce
                                                    description={novel?.description || ""}
                                                />
                                            </Transition>
                                        </Tab.Panel>
                                        <Tab.Panel>
                                            <Transition
                                                appear
                                                show={numberTab == 1}
                                                enter="transition-opacity duration-500"
                                                enterFrom="opacity-0"
                                                enterTo="opacity-100"
                                                leave="transition-opacity duration-500"
                                                leaveFrom="opacity-100"
                                                leaveTo="opacity-0"
                                            >
                                                <FormFeedback
                                                    tab={numberTab}
                                                    novelId={novel?.novelId}
                                                />
                                            </Transition>
                                        </Tab.Panel>
                                        <Tab.Panel>
                                            <Transition
                                                appear
                                                show={numberTab == 2}
                                                enter="transition-opacity duration-500"
                                                enterFrom="opacity-0"
                                                enterTo="opacity-100"
                                                leave="transition-opacity duration-500"
                                                leaveFrom="opacity-100"
                                                leaveTo="opacity-0"
                                            >
                                                <FormListChapters tab={numberTab} slug={novel?.slug} />
                                            </Transition>
                                        </Tab.Panel>
                                        <Tab.Panel>
                                            <Transition
                                                appear
                                                show={numberTab == 3}
                                                enter="transition-opacity duration-500"
                                                enterFrom="opacity-0"
                                                enterTo="opacity-100"
                                                leave="transition-opacity duration-500"
                                                leaveFrom="opacity-100"
                                                leaveTo="opacity-0"
                                            >
                                                <FormComment
                                                    tab={numberTab}
                                                    novelId={novel?.novelId}
                                                />
                                            </Transition>
                                        </Tab.Panel>
                                        {
                                            !matchesMobile && (
                                                <Tab.Panel>
                                                    <Transition
                                                        appear
                                                        show={numberTab == 4}
                                                        enter="transition-opacity duration-500"
                                                        enterFrom="opacity-0"
                                                        enterTo="opacity-100"
                                                        leave="transition-opacity duration-500"
                                                        leaveFrom="opacity-100"
                                                        leaveTo="opacity-0"
                                                    >
                                                        <div>Hâm mộ</div>
                                                    </Transition>
                                                </Tab.Panel>
                                            ) 
                                        }
                                    </Tab.Panels>
                                </Tab.Group>
                            </div>
                        </div>
                    </WrapperLayout>
                </main>
            </>
        )
    );
};

export const getServerSideProps: GetServerSideProps = async (context) => {
    try {
        const { novelSlug } = context.params as Params;
        // const token = getAccessTokenOnServer(context.req.headers.cookie as string)

        const novelResponse = await getNovelBySlugHandle(novelSlug as string);

        if(!novelResponse) {
            return { notFound: true };
        }

        return {
            props: {
                novel: JSON.parse(JSON.stringify(novelResponse.data?.novel)),
                tab: context.params?.hash?.toString() || "intro",
            },
        };
    } catch (error) {
        return { notFound: true };
    }
};

// export const getStaticProps: GetStaticProps<NovelDetailPageProps, Params> = async (
//     context: GetStaticPropsContext<Params>
// ) => {
//     try {
//         const { novelSlug } = context.params as Params;

//         const novelResponse = await getNovelBySlugHandle(novelSlug as string);

//         if (!novelResponse) {
//             return { notFound: true, props: { novel: null, tab: "intro" } };
//         }


//         return {
//             props: {
//                 novel: novelResponse?.data.novel || null,
//                 tab: context.params?.hash?.toString() || "intro",
//             },
//             revalidate: REVALIDATE_TIME,
//         };

//     } catch (error) {
//         return { notFound: true, props: { novel: null, tab: "intro" } };
//     }
// };
// export const getStaticPaths: GetStaticPaths<Params> = () => {
//     return {
//         paths: [],
//         fallback: true,
//     };
// };

// NovelDetailPage.getLayout = (page: ReactNode) => {
//     // const matchesMobile = useMediaQuery('(max-width: 640px)')

//     return <MainLayout isBannerPage={true}>{page}</MainLayout>;
// };

export default NovelDetailPage;
